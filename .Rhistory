devtools::load_all(".")
library(compotools)
cdmm
library(compotools)
compotools::cdmm()
library(compotools)
compotools::cdmm()
library(usethis)
library(devtools)
dyn.load('src//compotools.dll')
dvetools::test
devtools::test()
library(compotools)
devtools::test()
123
library(compotools)
library(compotools)
devtools::test()
count <- as.matrix(read.table("D:\\硕士毕业论文\\code\\cvs\\data\\combo_count_tab.txt"))
depth <- sapply(strsplit(colnames(count), "\\."), length)
library(compotools)
count <- as.matrix(read.table("D:\\硕士毕业论文\\code\\cvs\\data\\combo_count_tab.txt"))
depth <- sapply(strsplit(colnames(count), "\\."), length)
x <- count[, depth == 6 & colSums(count != 0) >= 1]
x[x == 0] <- 0.5
x <- x/rowSums(x)
z <- log(x)
demo <- read.delim("data/demographic.txt")
y <- demo$bmi[match(rownames(count), demo$pid)]
library(compotools)
data_dir = "D:\\硕士毕业论文\\code\\cvs\\data"
count <- as.matrix(read.table(data_dir + "\\combo_count_tab.txt"))
depth <- sapply(strsplit(colnames(count), "\\."), length)
x <- count[, depth == 6 & colSums(count != 0) >= 1]
x[x == 0] <- 0.5
x <- x/rowSums(x)
z <- log(x)
demo <- read.delim(data_dir + "\\demographic.txt")
count <- as.matrix(read.table(data_dir + "\\combo_count_tab.txt"))
data_dir = "D:\\硕士毕业论文\\code\\cvs\\data"
count <- as.matrix(read.table(paste0(data_dir,"\\combo_count_tab.txt")))
depth <- sapply(strsplit(colnames(count), "\\."), length)
x <- count[, depth == 6 & colSums(count != 0) >= 1]
x[x == 0] <- 0.5
x <- x/rowSums(x)
z <- log(x)
demo <- read.delim(paste0(data_dir,"\\demographic.txt"))
y <- demo$bmi[match(rownames(count), demo$pid)]
set.seed(23)
n <- length(y); ntrn <- 70; nrep <- 100
pe <- numeric(nrep); pe.lasso <- numeric(nrep)
for (i in 1:nrep) {
itrn <- sample(n, ntrn)
itst <- setdiff(1:n, itrn)
ans <- cv.cdmm(y[itrn], z[itrn, ], refit=TRUE)
bet <- ans$bet; int <- ans$int
pe[i] <- mean((y[itst] - int - z[itst, ] %*% bet)^2)
ans <- cv.cdmm(y[itrn], z[itrn, ], refit=TRUE, constr=FALSE)
bet.lasso <- ans$bet; int.lasso <- ans$int
pe.lasso[i] <- mean((y[itst] - int.lasso - z[itst, ] %*% bet.lasso)^2)
cat("Rep.", i, "done.\n")
}
work_dir = "D:\\硕士毕业论文\\code\\cvs"
setwd(work_dir)
save(pe, pe.lasso, file="result/bmi_pe.rda")
load("result/bmi_pe.rda")
mean(pe)
sd(pe)/sqrt(length(pe))
mean(pe.lasso)
sd(pe.lasso)/sqrt(length(pe.lasso))
set.seed(42)
p <- ncol(z); nboot <- 100
bet.bcv <- matrix(, p, nboot)
bet.bcv.lasso <- matrix(, p, nboot)
for (i in 1:nboot) {
bootid <- sample(1:length(y), replace=TRUE)
bet.bcv[, i] <- cv.cdmm(y[bootid], z[bootid, ], refit=TRUE)$bet
bet.bcv.lasso[, i] <- cv.cdmm(y[bootid], z[bootid, ], refit=TRUE, constr=FALSE)$bet
cat("Boot.", i, "done.\n")
}
stab.prob <- stab.cdmm(y, z)$prob
stab.prob.lasso <- stab.cdmm(y, z, constr=FALSE)$prob
save(bet.bcv, bet.bcv.lasso, stab.prob, stab.prob.lasso, file="result/bmi_result.rda")
load("result/bmi_result.rda")
bcv.prob <- rowMeans(bet.bcv != 0)
bcv.prob.lasso <- rowMeans(bet.bcv.lasso != 0)
isel <- bcv.prob >= 0.7
data.frame(genus=colnames(z)[isel], bcv.prob=bcv.prob[isel], stab.prob=stab.prob[isel])
isel.lasso <- bcv.prob.lasso >= 0.7
data.frame(genus=colnames(z)[isel.lasso], bcv.prob=bcv.prob.lasso[isel.lasso], stab.prob=stab.prob.lasso[isel.lasso])
bcv.sgn <- rbind(rowMeans(bet.bcv > 0), rowMeans(bet.bcv < 0))
taxa <- matrix(unlist(strsplit(colnames(z), "\\.")), 6)
phyla <- taxa[2, ]; genera <- taxa[6, ]
pdf.options(width=4.5, height=3.6)
pdf(file="fig/prob.pdf", family="Times")
par(mai=c(0.6, 0.6, 0.1, 0), mgp=c(1.8, 0.6, 0))
mp <- barplot(bcv.sgn, space=0, las=1, xlab="Genus", ylab="")
title(ylab="Selection probability", mgp=c(2.1, 0.7, 0))
ticks <- c(mp[match(unique(phyla), phyla)] - 0.5, max(mp) + 0.5)
axis(1, ticks, labels=FALSE)
text(ticks[2] - 1, -0.09, unique(phyla)[1], adj=1, xpd=TRUE)
text(ticks[2] + 1, -0.09, unique(phyla)[2], adj=0, xpd=TRUE)
text(mean(ticks[3:4]), -0.09, unique(phyla)[3], xpd=TRUE)
text(mean(ticks[6:7]) - 1, -0.09, unique(phyla)[6], xpd=TRUE)
segments(mean(ticks[1:2]) - 2, -0.06, mean(ticks[1:2]), -0.02, xpd=TRUE)
segments(mean(ticks[2:3]) + 2, -0.06, mean(ticks[2:3]), -0.02, xpd=TRUE)
segments(mean(ticks[3:4]), -0.06, , -0.02, xpd=TRUE)
segments(mean(ticks[6:7]), -0.06, , -0.02, xpd=TRUE)
dev.off()
ans <- cdmm(y, z[, isel], 0)
(bet <- as.numeric(ans$sol))
int <- ans$int
fitted <- int + drop(z[, isel] %*% bet)
ran <- range(c(y, fitted))
pdf.options(width=3.6, height=3.6)
pdf(file="fig/fitted.pdf", family="Times")
par(mai=c(0.6, 0.6, 0.1, 0.1), mgp=c(1.8, 0.6, 0))
plot(y, fitted, las=1, xlab="Observed BMI", ylab="Fitted BMI", xlim=ran, ylim=ran, asp=1)
abline(0, 1, lty="dashed")
dev.off()
?dev.off()
source("D:/硕士毕业论文/code/compotools/compotools/R/two_sample_test.R", echo=TRUE)
?t.test
x = rnorm(50)
x
x/mean(x)
x/sum(x)
positive_exp <- rexp(n = 10, rate = 0.5)
positive_exp
rpois(n=50, lambda=10)
p = 0.05
p >= 0 && p <= 1
p >= 0 || p <= 1
p >= 0 || p >= 1
p >= 0 && p >= 1
devtools::load_all("D:/硕士毕业论文/code/compotools/compotools")
rm(list = c("cd.test"))
devtools::load_all("D:/硕士毕业论文/code/compotools/compotools")
devtools::test()
getwd()
setwd('..')
getwd()
setwd('compotools')
devtools::test()
list.dirs()
setwd('compotools')
devtools::test()
c(0)
rep(0, 10)
matrix(rep(0, 10*20), nrow=10, ncol=20)
a = matrix(rep(0, 10*20), nrow=10, ncol=20)
dim(a)
a = matrix(rpois(10*20, 10), nrow=10, ncol=20)
a
a = matrix(rpois(10*5, 10), nrow=10, ncol=5)
a
colSums(a)
t(a)
t(a)/colSums(a)
t(t(a)/colSums(a))
b = t(t(a)/colSums(a))
colSums(b)
devtools::test()
devtools::test()
matrix(rep(1, 2*3), nrow = 2, ncol = 3)
amatrix(rep(1, 2*3), nrow = 2, ncol = 3)
a = matrix(rep(1, 2*3), nrow = 2, ncol = 3)
rowSums(a)
matrix(1,1,10)
rowSums(a)%*%matrix(1,1,3)/3
rowSums(a)%*%matrix(1,1,3)
c(1:9)
a = matrix(c(1:9), nrow=3,ncol=3)
a
diag(a)
diag(diag(a))
a - diag(diag(a))
a
max(a)
a = c(1,2,3)
a==1
identical(a, 1)
devtools::load_all(".")
?cv.coat
?coat
devtools::test()
devtools::load_all(".")
devtools::test()
devtools::test()
devtools::load_all(".")
devtools::test()
sample(c(1:n))%%nFolder
sample(c(1:10))%%5
sample(c(1:10))%%5+1
devtools::test()
xTrain
x <- matrix(rnorm(10*50), nrow=100, ncol=500)+1
row_sums = rowSums(x)
x = t(t(x)/row_sums)
result = cv.coat(x)
result = cv.coat(x)
result = cv.coat(x)
force(x)
devtools::test()
devtools::test()
x <- matrix(rpois(10*50, lambda = 10), nrow=10, ncol=50)
x
any(x==0)
x <- matrix(rpois(10*50, lambda = 10), nrow=10, ncol=50)
any(x==0)
x <- rpois(10, 1)
x
devtools::test()
x <- matrix(rpois(10*50, lambda = 1), nrow=10, ncol=50)
x==0
x[x==0]
x[x==0] = 0.5
x
devtools::test()
library(compotools)
work_dir = "D:\\硕士毕业论文\\code\\cvs"
setwd(work_dir)
count <- as.matrix(read.table(paste0("data\\combo_count_tab.txt")))
depth <- sapply(strsplit(colnames(count), "\\."), length)
x <- count[, depth == 6 & colSums(count != 0) >= 1]
View(count)
View(count)
x[x == 0] <- 0.5
x <- x/rowSums(x)
z <- log(x)
demo <- read.delim(paste0("data\\demographic.txt"))
y <- demo$bmi[match(rownames(count), demo$pid)]
library(compotools)
set.seed(23)
n <- length(y); ntrn <- 70; nrep <- 100
pe <- numeric(nrep); pe.lasso <- numeric(nrep)
devtools::load_all(".")
?cv.care
?PSM_solver
#----------------------------------- Load packages ------------------------------------#
library(ggplot2)
library(huge)
library(mvtnorm)
library(PRIMAL)
library(RColorBrewer)
library(scales)
library(igraph)
library(network)
?PSM_solver
library(devtools)
devtools::test()
x <- matrix(rpois(10*50, lambda = 1), nrow=10, ncol=50)
x[x==0] = 0.5
row_sums = rowSums(x)
x = t(t(x)/row_sums)
result = cv.care(x, nlambda = 50, lambda_min = 0.01, ratio = 0.75, nfold = 5)
force(lambda_min)
force(lambda_min)
devtools::test()
devtools::test()
?outer
a = c(1,2,3,4,5)
b = c(1.1, 0.9, 2.3, 3.6, 5.1)
outer(a, b, '-')
abs(outer(a, b, '-'))
apply(abs(outer(a, b, '-')), 1, which.min)
folds <- sample(rep(1:k, length.out = n))
folds <- sample(rep(1:5, length.out = 10))
folds
sum(folds==1)
sum(folds==2)
sum(folds==3)
rep(1:5, 2)
rep(1:5, length.out=10)
Kfold_CV_Care_col = function(col_num, X, lambda_min, lambda_vec, nfold){
#------------------------------------------------------------#
# Input:
#       col_num, numeric,
#           the index of each column;
#       X, (n * p) matrix,
#           compositional data;
#       lambda_min, numeric,
#           the minimal tuning parameter;
#       lambda_vec, (nlambda * 1) vector,
#           the sequence of tuning parameters;
#       nfold, numeric,
#           the number of folds in k-fold cross-validation
# Output:
#       which.min(error), numeric,
#           the index of the selected tuning parameter.
#------------------------------------------------------------#
n <- nrow(X)
p <- ncol(X)
G <- diag(p) - matrix(1, p, p) / p
nlambda <- length(lambda_vec)
error <- rep(0, nlambda)
foldid <- sample(rep(1:nfold, length.out=n))
for(i in 1 : nfold){
Xtrain <- X[foldid!=i,]
Xtest <- X[foldid==i,]
output <- Care_col(col_num, Xtrain, nlambda * 2, lambda_min)
index <- apply(abs(outer(lambda_vec, output$lambda_vec, "-")), 1, which.min)
omega_hat_mat_train <- (output$omega_hat_mat)[, index]
Sigma_c_hat_test <- cov(log(Xtest) %*% G) * (1 - 1 / length(Xtest))
Loss <- diag(t(omega_hat_mat_train) %*% Sigma_c_hat_test %*% omega_hat_mat_train) / 2 -
t(omega_hat_mat_train) %*% (diag(p)[, col_num] - rep(1, p) / p)
error <- error + as.numeric(Loss) / nsplit
}
return(which.min(error))
}
Kfold_Care_est <- function(X, lambda_vec, nlambda, lambda_min=0.01, nfold=5){
#----------------------------------------------------------------------#
# Input:
#       X, (n * p) matrix,
#           compositional data;
#       lambda_vec, (nlambda * 1) vector,
#           the sequence of tuning parameters;
#           When this parameter is missing, a vector will be generated automatically at instead.
#       nlambda, numeric,
#           number of tuning parameter.
#           When `lambda_vec` is missing, a vector of length `nlambda` will be generated at instead.
#       max_it, numeric
#           The solution process will stop when the number of iterations exceeds max_it(50 in default).
#       lambda_min, numeric,
#           the minimal tuning parameter you care;
#       nfold, numeric,
#           the number of folds in k-fold cross-validation
# Output:
#       Omega_hat, (p * p) matrix,
#           the estimator of Omega under the selected tuning parameter;
#       lambda_op, (p * 1) vector,
#           the selected tuning parameter for each column.
#----------------------------------------------------------------------#
is_lambda_vec_missing <- missing(lambda_vec)
if(!is_lambda_vec_missing){lambda_min = min(lambda_vec)/10}
p <- ncol(X)
Omega_hat <- matrix(0, p, p)
lambda_op <- rep(0, p)
for(j in 1 : p){
output <- Care_col(col_num = j, X, nlambda, lambda_min)
lambda_vec = ifelse(is_lambda_vec_missing, output$lambda_vec, lambda_vec)
opt <- kFold_CV_Care_col(col_num = j, X, lambda_min, lambda_vec = lambda_vec, nfold)
Omega_hat[, j] <- (output$omega_hat_mat)[, opt]
lambda_op[j] <- (output$lambda_vec)[opt]
}
Omega_hat <- Omega_hat * (abs(Omega_hat) <= abs(t(Omega_hat))) +
t(Omega_hat) * (abs(Omega_hat) > abs(t(Omega_hat)))
return(list(Omega_hat = Omega_hat, lambda_op = lambda_op))
}
a = c(1,1,1,1,0,0)
a
which(a)
which(a==1)
a[6]
?warning
